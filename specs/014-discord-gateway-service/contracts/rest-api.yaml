openapi: 3.0.3
info:
  title: Discord Gateway Service API
  version: 1.0.0
  description: |
    REST API for managing Discord voice channels and receiving real-time events.
    
    ## Authentication
    All endpoints require JWT authentication via `Authorization: Bearer <token>` header.
    
    ## Rate Limiting
    Endpoints are subject to Discord API rate limits. Clients should handle 429 responses with exponential backoff.

servers:
  - url: https://your-domain.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - bearerAuth: []

paths:
  /create-room:
    post:
      summary: Create a Discord voice channel
      operationId: createRoom
      tags:
        - Rooms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
            examples:
              basic:
                summary: Basic room creation
                value:
                  userLimit: 4
              withParent:
                summary: Room in category
                value:
                  name: "spell-coven-abc123"
                  parentId: "1234567890123456789"
                  userLimit: 6
      responses:
        '200':
          description: Voice channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoomResponse'
              example:
                channelId: "1234567890123456789"
                name: "spell-coven-abc123"
                guildId: "9876543210987654321"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /end-room/{channelId}:
    delete:
      summary: Delete a Discord voice channel
      operationId: deleteRoom
      tags:
        - Rooms
      parameters:
        - name: channelId
          in: path
          required: true
          description: Discord channel ID (snowflake)
          schema:
            type: string
            pattern: '^\d+$'
          example: "1234567890123456789"
      responses:
        '200':
          description: Voice channel deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRoomResponse'
              example:
                ok: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /internal/events:
    post:
      summary: Internal webhook for Gateway worker events
      operationId: internalEvents
      tags:
        - Internal
      description: |
        **INTERNAL USE ONLY** - This endpoint is called by the Discord Gateway worker.
        Requires HMAC signature verification.
      security:
        - hmacAuth: []
      parameters:
        - name: X-Hub-Timestamp
          in: header
          required: true
          description: Unix timestamp (seconds) when request was sent
          schema:
            type: integer
          example: 1730000000
        - name: X-Hub-Signature
          in: header
          required: true
          description: HMAC-SHA256 signature of "<timestamp>.<body>"
          schema:
            type: string
            pattern: '^sha256=[a-f0-9]{64}$'
          example: "sha256=abc123..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalEvent'
            examples:
              voiceJoined:
                summary: User joined voice channel
                value:
                  event: "voice.joined"
                  payload:
                    guildId: "9876543210987654321"
                    channelId: "1234567890123456789"
                    userId: "1111111111111111111"
              voiceLeft:
                summary: User left voice channel
                value:
                  event: "voice.left"
                  payload:
                    guildId: "9876543210987654321"
                    channelId: null
                    userId: "1111111111111111111"
      responses:
        '200':
          description: Event processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        '403':
          description: Invalid HMAC signature or expired timestamp
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid HMAC signature"

  /ws:
    get:
      summary: WebSocket endpoint for real-time events
      operationId: websocket
      tags:
        - WebSocket
      description: |
        Upgrade HTTP connection to WebSocket for receiving real-time events.
        
        ## Connection Flow
        1. Client connects to `wss://your-domain.com/api/ws`
        2. Client sends auth message: `{"type": "auth", "token": "<jwt>"}`
        3. Server validates JWT and responds with ACK
        4. Client receives events: `room.created`, `room.deleted`, `voice.joined`, `voice.left`
        
        ## Message Format
        All messages use versioned envelope: `{"v": 1, "type": "event", "event": "...", "payload": {...}, "ts": 1730000000000}`
      parameters:
        - name: Upgrade
          in: header
          required: true
          schema:
            type: string
            enum: [websocket]
        - name: Connection
          in: header
          required: true
          schema:
            type: string
            enum: [Upgrade]
      responses:
        '101':
          description: Switching Protocols (WebSocket upgrade successful)
        '400':
          description: Not a WebSocket request
        '426':
          description: Upgrade Required

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from OAuth2 + PKCE flow
    hmacAuth:
      type: apiKey
      in: header
      name: X-Hub-Signature
      description: HMAC-SHA256 signature with shared secret

  schemas:
    CreateRoomRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Channel name (auto-generated if omitted)
          example: "spell-coven-abc123"
        parentId:
          type: string
          pattern: '^\d+$'
          description: Parent category ID (optional)
          example: "1234567890123456789"
        userLimit:
          type: integer
          minimum: 0
          maximum: 99
          default: 4
          description: Maximum users (0 = unlimited)
          example: 4

    CreateRoomResponse:
      type: object
      required:
        - channelId
        - name
        - guildId
      properties:
        channelId:
          type: string
          pattern: '^\d+$'
          description: Created channel ID
          example: "1234567890123456789"
        name:
          type: string
          description: Channel name
          example: "spell-coven-abc123"
        guildId:
          type: string
          pattern: '^\d+$'
          description: Guild ID
          example: "9876543210987654321"

    DeleteRoomResponse:
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
          enum: [true]
          example: true

    InternalEvent:
      type: object
      required:
        - event
        - payload
      properties:
        event:
          type: string
          enum:
            - room.created
            - room.deleted
            - voice.joined
            - voice.left
          example: "voice.joined"
        payload:
          oneOf:
            - $ref: '#/components/schemas/RoomCreatedPayload'
            - $ref: '#/components/schemas/RoomDeletedPayload'
            - $ref: '#/components/schemas/VoiceJoinedPayload'
            - $ref: '#/components/schemas/VoiceLeftPayload'

    RoomCreatedPayload:
      type: object
      required:
        - channelId
        - name
        - guildId
        - userLimit
      properties:
        channelId:
          type: string
          pattern: '^\d+$'
        name:
          type: string
        guildId:
          type: string
          pattern: '^\d+$'
        parentId:
          type: string
          pattern: '^\d+$'
        userLimit:
          type: integer
          minimum: 0
          maximum: 99

    RoomDeletedPayload:
      type: object
      required:
        - channelId
        - guildId
      properties:
        channelId:
          type: string
          pattern: '^\d+$'
        guildId:
          type: string
          pattern: '^\d+$'

    VoiceJoinedPayload:
      type: object
      required:
        - guildId
        - channelId
        - userId
      properties:
        guildId:
          type: string
          pattern: '^\d+$'
        channelId:
          type: string
          pattern: '^\d+$'
        userId:
          type: string
          pattern: '^\d+$'

    VoiceLeftPayload:
      type: object
      required:
        - guildId
        - channelId
        - userId
      properties:
        guildId:
          type: string
          pattern: '^\d+$'
        channelId:
          type: string
          pattern: '^\d+$'
          nullable: true
        userId:
          type: string
          pattern: '^\d+$'

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Human-readable error message
          example: "Unauthorized"
        code:
          type: string
          description: Machine-readable error code
          example: "UNAUTHORIZED"
        details:
          type: object
          description: Additional error context
          additionalProperties: true

  responses:
    Unauthorized:
      description: Missing or invalid JWT token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Unauthorized"
            code: "UNAUTHORIZED"

    Forbidden:
      description: Valid JWT but insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Forbidden"
            code: "FORBIDDEN"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Channel not found"
            code: "NOT_FOUND"

    RateLimited:
      description: Discord API rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
          example: 5
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Rate limited by Discord API"
            code: "RATE_LIMITED"
            details:
              retryAfter: 5

    InternalError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Internal server error"
            code: "INTERNAL_ERROR"
