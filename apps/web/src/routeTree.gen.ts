/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GameGameIdRouteImport } from './routes/game.$gameId'
import { Route as DebugSessionStorageRouteImport } from './routes/debug/session-storage'
import { Route as ApiWsRouteImport } from './routes/api/ws'
import { Route as DebugVoiceChannelChannelIdRouteImport } from './routes/debug/voice-channel.$channelId'
import { Route as AuthDiscordCallbackRouteImport } from './routes/auth/discord/callback'
import { Route as ApiInternalEventsRouteImport } from './routes/api/internal/events'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameGameIdRoute = GameGameIdRouteImport.update({
  id: '/game/$gameId',
  path: '/game/$gameId',
  getParentRoute: () => rootRouteImport,
} as any)
const DebugSessionStorageRoute = DebugSessionStorageRouteImport.update({
  id: '/debug/session-storage',
  path: '/debug/session-storage',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWsRoute = ApiWsRouteImport.update({
  id: '/api/ws',
  path: '/api/ws',
  getParentRoute: () => rootRouteImport,
} as any)
const DebugVoiceChannelChannelIdRoute =
  DebugVoiceChannelChannelIdRouteImport.update({
    id: '/debug/voice-channel/$channelId',
    path: '/debug/voice-channel/$channelId',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthDiscordCallbackRoute = AuthDiscordCallbackRouteImport.update({
  id: '/auth/discord/callback',
  path: '/auth/discord/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiInternalEventsRoute = ApiInternalEventsRouteImport.update({
  id: '/api/internal/events',
  path: '/api/internal/events',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/ws': typeof ApiWsRoute
  '/debug/session-storage': typeof DebugSessionStorageRoute
  '/game/$gameId': typeof GameGameIdRoute
  '/api/internal/events': typeof ApiInternalEventsRoute
  '/auth/discord/callback': typeof AuthDiscordCallbackRoute
  '/debug/voice-channel/$channelId': typeof DebugVoiceChannelChannelIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/ws': typeof ApiWsRoute
  '/debug/session-storage': typeof DebugSessionStorageRoute
  '/game/$gameId': typeof GameGameIdRoute
  '/api/internal/events': typeof ApiInternalEventsRoute
  '/auth/discord/callback': typeof AuthDiscordCallbackRoute
  '/debug/voice-channel/$channelId': typeof DebugVoiceChannelChannelIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/ws': typeof ApiWsRoute
  '/debug/session-storage': typeof DebugSessionStorageRoute
  '/game/$gameId': typeof GameGameIdRoute
  '/api/internal/events': typeof ApiInternalEventsRoute
  '/auth/discord/callback': typeof AuthDiscordCallbackRoute
  '/debug/voice-channel/$channelId': typeof DebugVoiceChannelChannelIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/ws'
    | '/debug/session-storage'
    | '/game/$gameId'
    | '/api/internal/events'
    | '/auth/discord/callback'
    | '/debug/voice-channel/$channelId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/ws'
    | '/debug/session-storage'
    | '/game/$gameId'
    | '/api/internal/events'
    | '/auth/discord/callback'
    | '/debug/voice-channel/$channelId'
  id:
    | '__root__'
    | '/'
    | '/api/ws'
    | '/debug/session-storage'
    | '/game/$gameId'
    | '/api/internal/events'
    | '/auth/discord/callback'
    | '/debug/voice-channel/$channelId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiWsRoute: typeof ApiWsRoute
  DebugSessionStorageRoute: typeof DebugSessionStorageRoute
  GameGameIdRoute: typeof GameGameIdRoute
  ApiInternalEventsRoute: typeof ApiInternalEventsRoute
  AuthDiscordCallbackRoute: typeof AuthDiscordCallbackRoute
  DebugVoiceChannelChannelIdRoute: typeof DebugVoiceChannelChannelIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$gameId': {
      id: '/game/$gameId'
      path: '/game/$gameId'
      fullPath: '/game/$gameId'
      preLoaderRoute: typeof GameGameIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/debug/session-storage': {
      id: '/debug/session-storage'
      path: '/debug/session-storage'
      fullPath: '/debug/session-storage'
      preLoaderRoute: typeof DebugSessionStorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/ws': {
      id: '/api/ws'
      path: '/api/ws'
      fullPath: '/api/ws'
      preLoaderRoute: typeof ApiWsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/debug/voice-channel/$channelId': {
      id: '/debug/voice-channel/$channelId'
      path: '/debug/voice-channel/$channelId'
      fullPath: '/debug/voice-channel/$channelId'
      preLoaderRoute: typeof DebugVoiceChannelChannelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/discord/callback': {
      id: '/auth/discord/callback'
      path: '/auth/discord/callback'
      fullPath: '/auth/discord/callback'
      preLoaderRoute: typeof AuthDiscordCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/internal/events': {
      id: '/api/internal/events'
      path: '/api/internal/events'
      fullPath: '/api/internal/events'
      preLoaderRoute: typeof ApiInternalEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiWsRoute: ApiWsRoute,
  DebugSessionStorageRoute: DebugSessionStorageRoute,
  GameGameIdRoute: GameGameIdRoute,
  ApiInternalEventsRoute: ApiInternalEventsRoute,
  AuthDiscordCallbackRoute: AuthDiscordCallbackRoute,
  DebugVoiceChannelChannelIdRoute: DebugVoiceChannelChannelIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
